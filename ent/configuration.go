// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vicanso/forest/ent/configuration"
	"github.com/vicanso/forest/ent/schema"
)

// Configuration is the model entity for the Configuration schema.
type Configuration struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// Status holds the value of the "status" field.
	Status schema.Status `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category configuration.Category `json:"category,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"startedAt,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"endedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configuration) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // status
		&sql.NullString{}, // name
		&sql.NullString{}, // category
		&sql.NullString{}, // owner
		&sql.NullString{}, // data
		&sql.NullTime{},   // started_at
		&sql.NullTime{},   // ended_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configuration fields.
func (c *Configuration) assignValues(values ...interface{}) error {
	if m, n := len(values), len(configuration.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		c.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		c.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		c.Status = schema.Status(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[4])
	} else if value.Valid {
		c.Category = configuration.Category(value.String)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field owner", values[5])
	} else if value.Valid {
		c.Owner = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field data", values[6])
	} else if value.Valid {
		c.Data = value.String
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field started_at", values[7])
	} else if value.Valid {
		c.StartedAt = value.Time
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field ended_at", values[8])
	} else if value.Valid {
		c.EndedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this Configuration.
// Note that, you need to call Configuration.Unwrap() before calling this method, if this Configuration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configuration) Update() *ConfigurationUpdateOne {
	return (&ConfigurationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Configuration) Unwrap() *Configuration {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configuration is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configuration) String() string {
	var builder strings.Builder
	builder.WriteString("Configuration(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", c.Category))
	builder.WriteString(", owner=")
	builder.WriteString(c.Owner)
	builder.WriteString(", data=")
	builder.WriteString(c.Data)
	builder.WriteString(", started_at=")
	builder.WriteString(c.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ended_at=")
	builder.WriteString(c.EndedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Configurations is a parsable slice of Configuration.
type Configurations []*Configuration

func (c Configurations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
